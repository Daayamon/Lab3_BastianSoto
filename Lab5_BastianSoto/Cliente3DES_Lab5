import socket
from Crypto.Cipher import DES3
from Crypto.Protocol.KDF import PBKDF2
import random


def diffie_hellman(p, g):
    # Generar aleatoriamente las claves privadas 'a' y 'b' para el intercambio de claves Diffie-Hellman
    a = random.randint(1, 100)
    b = random.randint(1, 100)
    
    # Calcular las claves públicas 'A' y 'B' usando el intercambio de claves Diffie-Hellman
    A = ((pow(g, a)) % p)
    B = ((pow(g, b)) % p)
    
    # Calcular las claves compartidas 'Ka' y 'Kb' utilizando las claves públicas recibidas
    Ka = ((pow(B, a)) % p)
    Kb = ((pow(A, b)) % p)
    
    return Ka, Kb




    # Configurar el cliente y conectarse al servidor
client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
client.connect(('127.0.0.1', 12345))

p = int(input("Ingrese p: "))
g = int(input("Ingrese g: "))
Ka, Kb = diffie_hellman(p, g)

    # Enviar la clave pública 'Kb' al servidor
client.sendall(str(Kb).encode())
    
    # Recibir la clave pública 'Ka' del servidor
Ka_received = int(client.recv(1024).decode())

print("Clave compartida recibida del servidor:", Ka_received)

    # Clave para 3DES (ajustar la longitud de la clave según la variante de 3DES utilizada)


key = PBKDF2(str(Ka_received).encode(), b'salt', dkLen=24)
cipher = DES3.new(key, DES3.MODE_ECB)
print("Clave 3DES generada:", key)

cipher = DES3.new(key, DES3.MODE_ECB)

    # Verificar la longitud de la clave 3DES

    # Leer el mensaje desde el archivo
with open("mensajeentrada.txt", "r") as file:
    message = file.read()


 
# Pad el mensaje para que su longitud sea un múltiplo de 8 (bloque de cifrado DES)
message = message.ljust((len(message) // 8 + 1) * 8)
 
    # Encriptar el mensaje con 3DES
encrypted_message_des3 = cipher.encrypt(message.encode())

    # Enviar el mensaje cifrado al servidor
print("Mensaje cifrado enviado al servidor:", encrypted_message_des3)
client.sendall(encrypted_message_des3)
   

    
    # Desencriptar los datos
decrypted_data = cipher.decrypt(encrypted_message_des3)
    


    # Cerrar la conexión
client.close()


